<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小美工带你学习弯道超车的技巧！</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://olikui.github.io/"/>
  <updated>2018-03-08T06:38:22.047Z</updated>
  <id>http://olikui.github.io/</id>
  
  <author>
    <name>olki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git基本及常用命令</title>
    <link href="http://olikui.github.io/2018/03/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://olikui.github.io/2018/03/05/git常用命令/</id>
    <published>2018-03-05T03:09:39.000Z</published>
    <updated>2018-03-08T06:38:22.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git下载"><a href="#git下载" class="headerlink" title="git下载"></a>git下载</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网下载</a></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git config --global user.name <span class="string">"你的名字"</span></span><br><span class="line">$ git config --global user.email <span class="string">"你的邮箱地址"</span></span><br></pre></td></tr></table></figure><p> 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。<br> 注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="SSH-key生成"><a href="#SSH-key生成" class="headerlink" title="SSH key生成"></a>SSH key生成</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"你的邮箱地址"</span></span><br></pre></td></tr></table></figure><h2 id="clone代码"><a href="#clone代码" class="headerlink" title="clone代码"></a>clone代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 克隆master分支</span></span><br><span class="line">$ git clone &lt;版本库的网址&gt;</span><br><span class="line"><span class="comment">// 指定克隆的分支名</span></span><br><span class="line">$ git clone -b &lt;分支名&gt; &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure><h2 id="gitignore生效办法"><a href="#gitignore生效办法" class="headerlink" title=".gitignore生效办法"></a>.gitignore生效办法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先把本地缓存删除（改变成未track状态）</span></span><br><span class="line">$ git rm -r --cached .</span><br><span class="line"><span class="comment">// 然后再提交</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'update .gitignore'</span></span><br></pre></td></tr></table></figure><h2 id="查看各种状态"><a href="#查看各种状态" class="headerlink" title="查看各种状态"></a>查看各种状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看当前状态（分支名，有哪些改动，有哪些冲突，工作区暂存区中的内容，几个commit等等）</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment">// 查看本地仓库的提交历史</span></span><br><span class="line">$ git log</span><br><span class="line"><span class="comment">// 查看本地仓库的提交历史，简洁版</span></span><br><span class="line">$ git log --pretty=oneline</span><br><span class="line"><span class="comment">// 查看命令历史</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看分支：</span></span><br><span class="line">$ git branch -a</span><br><span class="line"><span class="comment">// 创建本地分支：</span></span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"><span class="comment">// 切换本地分支：</span></span><br><span class="line">$ git checkout &lt;分支名&gt;</span><br><span class="line"><span class="comment">// 创建+切换本地分支：</span></span><br><span class="line">$ git checkout -b &lt;name&gt;</span><br><span class="line"><span class="comment">// 合并某分支到当前分支：</span></span><br><span class="line">$ git merge &lt;要合并的分支&gt;</span><br><span class="line"><span class="comment">// 将本地分支推送到远程</span></span><br><span class="line">$ git push origin &lt;要推送的本地分支名&gt;</span><br><span class="line"><span class="comment">// 以远程分支为基础，建一个本地分支</span></span><br><span class="line">$ git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt;</span><br><span class="line">// 删除本地分支：</span><br><span class="line">$ git branch -d &lt;本地分支名&gt;</span><br><span class="line">// 删除远程分支。将本地空分支推送到远程分支,相当于删除远程分支</span><br><span class="line">$ git push origin   :&lt;要删除的远程分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="更新和提交代码"><a href="#更新和提交代码" class="headerlink" title="更新和提交代码"></a>更新和提交代码</h2><p>一个新的文件,或改动.刚开始只存在你的工作区。当你使用git add的时候，Git就会缓存这个改动并且跟踪。当你使用git commit的时候就会把你的改动提交到仓库里。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存所有改动</span></span><br><span class="line">$ git add --all</span><br><span class="line"><span class="comment">// 缓存单个文件的改动</span></span><br><span class="line">$ git add &lt;该文件的文件名，包含路径&gt;</span><br><span class="line"><span class="comment">// 提交至本地仓库</span></span><br><span class="line">$ git commit -m &lt;提交备注&gt;</span><br><span class="line"><span class="comment">// 更新本地代码</span></span><br><span class="line">$ git pull origin &lt;分支名&gt;</span><br><span class="line"><span class="comment">// 将本地commit推送至远端</span></span><br><span class="line">$ git push orign &lt;分支名&gt;</span><br></pre></td></tr></table></figure></p><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 撤销工作区某个文件的更改</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"><span class="comment">// 撤销工作区所有文件的更改</span></span><br><span class="line">$ git checkout .</span><br><span class="line"><span class="comment">// 重置暂存区的指定文件，与上一次commit保持一致。但更改并没有消失，而是更改打回工作区</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"><span class="comment">// 重置暂存区与工作区，与上一次commit保持一致。</span></span><br><span class="line">$ git reset --hard &lt;当前分支名&gt;</span><br><span class="line"><span class="comment">// 重置当前分支的指针为指定commit，同时重置暂存区。但更改并没有消失，而是更改打回工作区</span></span><br><span class="line">$ git reset [commit]   </span><br><span class="line"><span class="comment">// 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致。</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"><span class="comment">// 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"><span class="comment">// 暂时将未提交的变化存入stash，稍后再弹出</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="git-review"><a href="#git-review" class="headerlink" title="git review"></a>git review</h2><p>代码评审使用gerrit系统，git中使用git review &lt;分支名&gt;(默认是master) 命令执行review操作。</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ul><li>提交reivew之前pull远程代码，保证提交以前是最新代码，有冲突需要本地合并处理。</li><li>一个单一的功能的变更放入一个commit中，提交一次reivew</li></ul><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><ul><li>review没有通过怎么办？</li><li>先回到要修改的那个commit<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft  &lt;要修改的那个commit的id&gt;</span><br></pre></td></tr></table></figure></li></ul><p>继续修改你要改的文件。修改后add缓存文件，并执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure></p><p>将刚生产的变更归并到上一次变更里，继续执行git review</p><ul><li>已经做了多个提交commits怎么办？</li><li>如果多个提交是相关联的，请合并这个提交为一个提交</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询最先提交的commit, 记住id.</span></span><br><span class="line">$ git log </span><br><span class="line"><span class="comment">// 进行变基操作</span></span><br><span class="line">$ git rebase -i  &lt;上一步查到的id&gt;</span><br><span class="line"><span class="comment">// 弹出的界面上罗列了最先提交的commit到现在的所有提交记录</span></span><br><span class="line"><span class="comment">//将每列开头的 'pick' 改成 's', 只保留第一列的 'pick'。</span></span><br><span class="line"><span class="comment">//保存修改后系统会自动把这些commits合并成一个commit.</span></span><br><span class="line"><span class="comment">// 如果遇到冲突需要手动解决。合并冲突后，继续变基， 直到所有commits都合并为止.</span></span><br><span class="line">$ git rebase --<span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>如果review中提交了多个commits，其中一个commit没review过怎么办(包括以前某个commit中没有生成change id)？一次commit对应生成一个review, 前一个review没通过的话，后面的review 通过了也提交不了。 必须把前面一个review 弄通过，后面的review才能提交。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询未通过的review对应的commit id(gerrit里有记录)</span></span><br><span class="line"><span class="comment">// 回到这个commit的前一个节点，注意有个^</span></span><br><span class="line">$ 执行 git rebase -i  &lt;未通过的review对应的commit id&gt;^ </span><br><span class="line"><span class="comment">// 修改并缓存要提交的文件后</span></span><br><span class="line">$ git commit --amend</span><br><span class="line"><span class="comment">// 返回head处</span></span><br><span class="line">$ git rebase --<span class="keyword">continue</span> </span><br><span class="line"><span class="comment">// 提交对老review的更新</span></span><br><span class="line">$ git review</span><br></pre></td></tr></table></figure><h2 id="特别提示"><a href="#特别提示" class="headerlink" title="特别提示"></a>特别提示</h2><p>如果git review &lt;分支名&gt;后提示缺失commit_id，可能是前面rebase操作造成的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现将rebase好的commit推回工作区</span></span><br><span class="line">$ git reset head^</span><br><span class="line"><span class="comment">// 再重新add和commit，产生新的commit_id</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &lt;备注信息&gt;</span><br><span class="line">$ git review &lt;分支名&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git下载&quot;&gt;&lt;a href=&quot;#git下载&quot; class=&quot;headerlink&quot; title=&quot;git下载&quot;&gt;&lt;/a&gt;git下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="git" scheme="http://olikui.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>开天第一篇</title>
    <link href="http://olikui.github.io/2018/03/03/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://olikui.github.io/2018/03/03/第一篇/</id>
    <published>2018-03-03T03:09:39.000Z</published>
    <updated>2018-03-08T06:38:09.970Z</updated>
    
    <content type="html"><![CDATA[<p>o(╯□╰)o</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;o(╯□╰)o&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="第一篇" scheme="http://olikui.github.io/tags/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    
      <category term="HEXO" scheme="http://olikui.github.io/tags/HEXO/"/>
    
  </entry>
  
</feed>
