{"meta":{"title":"小美工带你学习弯道超车的技巧！","subtitle":null,"description":null,"author":"olki","url":"http://olikui.github.io"},"pages":[{"title":"categories","date":"2018-03-05T12:57:45.000Z","updated":"2018-03-05T12:57:54.896Z","comments":false,"path":"categories/index.html","permalink":"http://olikui.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-05T12:57:17.000Z","updated":"2018-03-05T12:57:38.057Z","comments":false,"path":"tags/index.html","permalink":"http://olikui.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git基本及常用命令","slug":"git常用命令","date":"2018-03-05T03:09:39.000Z","updated":"2018-03-08T06:38:22.047Z","comments":true,"path":"2018/03/05/git常用命令/","link":"","permalink":"http://olikui.github.io/2018/03/05/git常用命令/","excerpt":"","text":"git下载git官网下载 初始化初始化参数123$ git config --global user.name \"你的名字\"$ git config --global user.email \"你的邮箱地址\" 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。 注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 初始化本地仓库 1$ git init SSH key生成1$ ssh-keygen -t rsa -C \"你的邮箱地址\" clone代码1234// 克隆master分支$ git clone &lt;版本库的网址&gt;// 指定克隆的分支名$ git clone -b &lt;分支名&gt; &lt;版本库的网址&gt; .gitignore生效办法12345// 先把本地缓存删除（改变成未track状态）$ git rm -r --cached .// 然后再提交$ git add .$ git commit -m 'update .gitignore' 查看各种状态12345678// 查看当前状态（分支名，有哪些改动，有哪些冲突，工作区暂存区中的内容，几个commit等等）$ git status// 查看本地仓库的提交历史$ git log// 查看本地仓库的提交历史，简洁版$ git log --pretty=oneline// 查看命令历史$ git reflog 分支123456789101112131415161718// 查看分支：$ git branch -a// 创建本地分支：$ git branch &lt;分支名&gt;// 切换本地分支：$ git checkout &lt;分支名&gt;// 创建+切换本地分支：$ git checkout -b &lt;name&gt;// 合并某分支到当前分支：$ git merge &lt;要合并的分支&gt;// 将本地分支推送到远程$ git push origin &lt;要推送的本地分支名&gt;// 以远程分支为基础，建一个本地分支$ git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt;// 删除本地分支：$ git branch -d &lt;本地分支名&gt;// 删除远程分支。将本地空分支推送到远程分支,相当于删除远程分支$ git push origin :&lt;要删除的远程分支名&gt; 更新和提交代码一个新的文件,或改动.刚开始只存在你的工作区。当你使用git add的时候，Git就会缓存这个改动并且跟踪。当你使用git commit的时候就会把你的改动提交到仓库里。12345678910// 缓存所有改动$ git add --all// 缓存单个文件的改动$ git add &lt;该文件的文件名，包含路径&gt;// 提交至本地仓库$ git commit -m &lt;提交备注&gt;// 更新本地代码$ git pull origin &lt;分支名&gt;// 将本地commit推送至远端$ git push orign &lt;分支名&gt; 撤销1234567891011121314151617// 撤销工作区某个文件的更改$ git checkout [file]// 撤销工作区所有文件的更改$ git checkout .// 重置暂存区的指定文件，与上一次commit保持一致。但更改并没有消失，而是更改打回工作区$ git reset [file]// 重置暂存区与工作区，与上一次commit保持一致。$ git reset --hard &lt;当前分支名&gt;// 重置当前分支的指针为指定commit，同时重置暂存区。但更改并没有消失，而是更改打回工作区$ git reset [commit] // 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致。$ git reset --hard [commit]// 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]// 暂时将未提交的变化存入stash，稍后再弹出$ git stash$ git stash pop git review代码评审使用gerrit系统，git中使用git review &lt;分支名&gt;(默认是master) 命令执行review操作。 规则 提交reivew之前pull远程代码，保证提交以前是最新代码，有冲突需要本地合并处理。 一个单一的功能的变更放入一个commit中，提交一次reivew 特殊情况 review没有通过怎么办？ 先回到要修改的那个commit1$ git reset --soft &lt;要修改的那个commit的id&gt; 继续修改你要改的文件。修改后add缓存文件，并执行1$ git commit --amend 将刚生产的变更归并到上一次变更里，继续执行git review 已经做了多个提交commits怎么办？ 如果多个提交是相关联的，请合并这个提交为一个提交 123456789// 查询最先提交的commit, 记住id.$ git log // 进行变基操作$ git rebase -i &lt;上一步查到的id&gt;// 弹出的界面上罗列了最先提交的commit到现在的所有提交记录//将每列开头的 'pick' 改成 's', 只保留第一列的 'pick'。//保存修改后系统会自动把这些commits合并成一个commit.// 如果遇到冲突需要手动解决。合并冲突后，继续变基， 直到所有commits都合并为止.$ git rebase --continue 如果review中提交了多个commits，其中一个commit没review过怎么办(包括以前某个commit中没有生成change id)？一次commit对应生成一个review, 前一个review没通过的话，后面的review 通过了也提交不了。 必须把前面一个review 弄通过，后面的review才能提交。 123456789// 查询未通过的review对应的commit id(gerrit里有记录)// 回到这个commit的前一个节点，注意有个^$ 执行 git rebase -i &lt;未通过的review对应的commit id&gt;^ // 修改并缓存要提交的文件后$ git commit --amend// 返回head处$ git rebase --continue // 提交对老review的更新$ git review 特别提示如果git review &lt;分支名&gt;后提示缺失commit_id，可能是前面rebase操作造成的。123456// 现将rebase好的commit推回工作区$ git reset head^// 再重新add和commit，产生新的commit_id$ git add .$ git commit -m &lt;备注信息&gt;$ git review &lt;分支名&gt;","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://olikui.github.io/tags/git/"}]},{"title":"开天第一篇","slug":"第一篇","date":"2018-03-03T03:09:39.000Z","updated":"2018-03-08T06:38:09.970Z","comments":true,"path":"2018/03/03/第一篇/","link":"","permalink":"http://olikui.github.io/2018/03/03/第一篇/","excerpt":"","text":"o(╯□╰)o","categories":[],"tags":[{"name":"第一篇","slug":"第一篇","permalink":"http://olikui.github.io/tags/第一篇/"},{"name":"HEXO","slug":"HEXO","permalink":"http://olikui.github.io/tags/HEXO/"}]}]}